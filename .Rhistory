if (is.numeric(gq) != "TRUE"){
stop("specified genotype quality cutoff must be numeric")
}
#extract gq from the vcf
gq.matrix<- vcfR::extract.gt(vcfR, element='GQ', as.numeric=TRUE)
#write a test to catch if the variable of interest has not been specified
if (sum(!is.na(gq.matrix)) < .5){
stop("genotype quality not specified in input vcf")
}
#calculate the SNPs that fall below the gq filter
j<-round((sum(gq.matrix < gq, na.rm = TRUE)/sum(!is.na(gq.matrix)))*100, 2)
#report filter
message(j,"% of genotypes fall below a genotype quality of ",gq," and were converted to NA")
#convert to NAs
gq.matrix[gq.matrix < gq] <- NA
vcfR@gt[,-1][ is.na(gq.matrix) == TRUE ] <- NA
#close if statement
}
else{
message("no genotype quality cutoff provided, exploratory visualization will be generated.")
#extract gq from the vcf
gq.matrix<- vcfR::extract.gt(vcfR, element='GQ', as.numeric=TRUE)
#write a test to catch if the variable of interest has not been specified
if (sum(!is.na(gq.matrix)) < .5){
message("genotype quality not specified in input vcf")
}
else{
#plot histogram of gq
graphics::hist(gq.matrix,
xlab = "genotype quality")
graphics::abline(v=mean(gq.matrix, na.rm = TRUE),
col="red",
lty="dashed")
}
}
#return
return(vcfR)
#close function
}
filt.vcfR<-hard_filter(vcfR=vcfR, depth = 5)
filt.vcfR@gt[1:10,1:10]
filt.vcfR<-filter_biallelic(filt.vcfR)
filt.vcfR@gt[1:10,1:10]
filt.vcfR@gt[1:10,1:10]
filt.vcfR<-filter_allele_balance(filt.vcfR)
vcfR<-filt.vcfR
filt.vcfR<-hard_filter(vcfR=vcfR, depth = 5)
filt.vcfR<-filter_biallelic(filt.vcfR)
filt.vcfR@gt[1:10,1:10]
#filt.vcfR<-filter_allele_balance(filt.vcfR)
vcfR<-filt.vcfR
#store vector of number of alternate alleles at each SNP
v<-nchar(vcfR@fix[,"ALT"])
table(v)
vcfR@fix[,"ALT"]
#add 1 to each value to account for the reference allele
v<-v+1
v
table(v)
graphics::hist(v,
main= "distribution of alleles present in vcf",
xlab= "number of alleles",
ylab= "number of SNPs",
xlim= c(.5,4.5))
graphics::abline(v=2.5,
col="red")
p<-nrow(vcfR@fix)
p
p-sum(nchar(vcfR@fix[,"ALT"]) == 1)
q<-p-sum(nchar(vcfR@fix[,"ALT"]) == 1)
y<-q/p
message(q, " SNPs, ", round(y, 3), "% of all input SNPs, contained more than 2 alleles, and were removed from the VCF")
nchar(vcfR@fix[,"ALT"]) == 1
table(nchar(vcfR@fix[,"ALT"]) == 1)
vcfR<-vcfR[nchar(vcfR@fix[,"ALT"]) == 1,]
#set default parameter for minimum allele ratio for a het call (.25)
if(is.null(min.ratio)){
min.ratio=.25
}
ad.matrix<- vcfR::extract.gt(vcfR, element='AD')
gt.matrix<- vcfR::extract.gt(vcfR, element='GT')
ad.matrix[1:10,1:10]
gt.matrix[1:10,1:10]
if (sum(!is.na(ad.matrix)) < .5){
stop("allele depth is not specified in input vcf, therefore allele balance cannot be calculated")
}
filter_allele_balance <- function(vcfR,
min.ratio=NULL,
max.ratio=NULL){
#if specified vcfR is not class 'vcfR', fail gracefully
if (class(vcfR) != "vcfR"){
stop("specified vcfR object must be of class 'vcfR'")
}
#set default parameter for minimum allele ratio for a het call (.25)
if(is.null(min.ratio)){
min.ratio=.25
}
#set default parameter for maximum allele ratio for a het call (.75)
if(is.null(max.ratio)){
max.ratio=.75
}
#if these ratios have been specified by the user, leave them alone
#extract AD from the vcf
ad.matrix<- vcfR::extract.gt(vcfR, element='AD')
#write a test to catch if the variable of interest has not been specified
if (sum(!is.na(ad.matrix)) < .5){
stop("allele depth is not specified in input vcf, therefore allele balance cannot be calculated")
}
#extract GT from the vcf
gt.matrix<- vcfR::extract.gt(vcfR, element='GT')
#mask dp matrix to include only called hets from gt matrix
ad.matrix[gt.matrix != "0/1"]<-NA
#split allele 1 depth from allele 2 depth
al1<-structure(as.numeric(gsub(",.*", "", ad.matrix)), dim=dim(ad.matrix))
al2<-structure(as.numeric(gsub(".*,", "", ad.matrix)), dim=dim(ad.matrix))
#calculate AB for each sample
al.bal<-al1/(al1 + al2)
#calculate logical storing whether each het genotype passes the filter
AB<-al1/(al1 + al2) > max.ratio | al1/(al1 + al2) < min.ratio
#calculate percent of het genotypes failing the filter
p<-round(sum(AB, na.rm = TRUE) / sum(is.na(AB) == FALSE)*100, 2)
#calculate overall percentage of genotypes failing the filter
j<-round(sum(AB, na.rm = TRUE) / sum(is.na(gt.matrix) == FALSE)*100, 2)
#print to user
message(p,"% of het genotypes (",j,"% of all genotypes) fall outside of ",min.ratio," - ",max.ratio, " allele balance ratio and were converted to NA")
#convert failing genotypes to NA
vcfR@gt[,-1][AB]<-NA
#make histogram of allele balance at all het genotypes
graphics::hist(al.bal,
xlim = c(0,1),
ylab = "number of genotypes",
xlab = "Allele balance",
main ="allele balance distribution")
graphics::abline(v=c(min.ratio,max.ratio),
col="red")
#return vcfR
return(vcfR)
#close function
}
filt.vcfR<-filter_allele_balance(filt.vcfR)
packageStartupMessage(
"SNPfiltR"
)
#print package startup message
packageStartupMessage(
"SNPfiltR v.1.0.0"
)
library(vcfR)
library(vcfR)
library(ade4)
citation('vcfR') # Citation
packageStartupMessage(
"SNPfiltR v.1.0.0"
"Please cite:
DeRaad, D.A. 2021. SNPfiltR: an R package for interactive and reproducible SNP filtering. Preprint on Authorea. <http://dx.doi.org/10.22541/au.163976415.53888836/v1>
Knaus, Brian J., and Niklaus J. Grunwald. 2017. VCFR: a package to manipulate and visualize variant call format data in R. Molecular Ecology Resources 17(1):44-53. http://dx.doi.org/10.1111/1755-0998.12549."
)
#print package startup message
packageStartupMessage(
"SNPfiltR v.1.0.0"
"Please cite: \nDeRaad, D.A. 2021. SNPfiltR: an R package for interactive and reproducible SNP filtering. Preprint on Authorea. <http://dx.doi.org/10.22541/au.163976415.53888836/v1> \nKnaus, Brian J., and Niklaus J. Grunwald. 2017. VCFR: a package to manipulate and visualize variant call format data in R. Molecular Ecology Resources 17(1):44-53. http://dx.doi.org/10.1111/1755-0998.12549."
)
#print package startup message
packageStartupMessage(
"SNPfiltR v.1.0.0"
"Please cite:"
"DeRaad, D.A. 2021. SNPfiltR: an R package for interactive and reproducible SNP filtering. Preprint on Authorea. <http://dx.doi.org/10.22541/au.163976415.53888836/v1>"
"Knaus, Brian J., and Niklaus J. Grunwald. 2017. VCFR: a package to manipulate and visualize variant call format data in R. Molecular Ecology Resources 17(1):44-53. http://dx.doi.org/10.1111/1755-0998.12549.")
#print package startup message
packageStartupMessage(
c("SNPfiltR v.1.0.0"
"Please cite:"
"DeRaad, D.A. 2021. SNPfiltR: an R package for interactive and reproducible SNP filtering. Preprint on Authorea. <http://dx.doi.org/10.22541/au.163976415.53888836/v1>"
"Knaus, Brian J., and Niklaus J. Grunwald. 2017. VCFR: a package to manipulate and visualize variant call format data in R. Molecular Ecology Resources 17(1):44-53. http://dx.doi.org/10.1111/1755-0998.12549."))
#print package startup message
packageStartupMessage(
c("SNPfiltR v.1.0.0"
"Please cite:"
"DeRaad, D.A. 2021. SNPfiltR: an R package for interactive and reproducible SNP filtering. Preprint on Authorea. <http://dx.doi.org/10.22541/au.163976415.53888836/v1>"
"Knaus, Brian J., and Niklaus J. Grunwald. 2017. VCFR: a package to manipulate and visualize variant call format data in R. Molecular Ecology Resources 17.1:44-53. http://dx.doi.org/10.1111/1755-0998.12549."))
packageStartupMessage(
c("SNPfiltR v.1.0.0"
"Please cite:"
"DeRaad, D.A. 2021. SNPfiltR: an R package for interactive and reproducible SNP filtering. Preprint on Authorea. <http://dx.doi.org/10.22541/au.163976415.53888836/v1>"
"Knaus, Brian J., and Niklaus J. Grunwald. 2017. VCFR: a package to manipulate and visualize variant call format data in R. Molecular Ecology Resources 17.1:44-53. http://dx.doi.org/10.1111/1755-0998.12549."))
"Please cite:")
#print package startup message
packageStartupMessage(
c("SNPfiltR v.1.0.0"
"Please cite:"))
#print package startup message
packageStartupMessage(
c("SNPfiltR v.1.0.0",
"Please cite:",
"DeRaad, D.A. 2021. SNPfiltR: an R package for interactive and reproducible SNP filtering. Preprint on Authorea. <http://dx.doi.org/10.22541/au.163976415.53888836/v1>",
"Knaus, Brian J., and Niklaus J. Grunwald. 2017. VCFR: a package to manipulate and visualize variant call format data in R. Molecular Ecology Resources 17.1:44-53. http://dx.doi.org/10.1111/1755-0998.12549."))
#print package startup message
packageStartupMessage(
c("SNPfiltR v.1.0.0 \n",
"Please cite:",
"DeRaad, D.A. 2021. SNPfiltR: an R package for interactive and reproducible SNP filtering. Preprint on Authorea. <http://dx.doi.org/10.22541/au.163976415.53888836/v1>",
"Knaus, Brian J., and Niklaus J. Grunwald. 2017. VCFR: a package to manipulate and visualize variant call format data in R. Molecular Ecology Resources 17.1:44-53. http://dx.doi.org/10.1111/1755-0998.12549."))
#print package startup message
packageStartupMessage(
c("SNPfiltR v.1.0.0 \n",
"Please cite: \n",
"DeRaad, D.A. 2021. SNPfiltR: an R package for interactive and reproducible SNP filtering. Preprint on Authorea. <http://dx.doi.org/10.22541/au.163976415.53888836/v1>",
"Knaus, Brian J., and Niklaus J. Grunwald. 2017. VCFR: a package to manipulate and visualize variant call format data in R. Molecular Ecology Resources 17.1:44-53. http://dx.doi.org/10.1111/1755-0998.12549."))
#print package startup message
packageStartupMessage(
c("SNPfiltR v.1.0.0 \n",
"Please cite: \n",
"DeRaad, D.A. 2021. SNPfiltR: an R package for interactive and reproducible SNP filtering. Preprint on Authorea. <http://dx.doi.org/10.22541/au.163976415.53888836/v1> \n",
"Knaus, Brian J., and Niklaus J. Grunwald. 2017. VCFR: a package to manipulate and visualize variant call format data in R. Molecular Ecology Resources 17.1:44-53. http://dx.doi.org/10.1111/1755-0998.12549."))
#print package startup message
packageStartupMessage(
c("SNPfiltR v.1.0.0 \n",
"Please cite: \n",
"DeRaad, D.A. 2021. SNPfiltR: an R package for interactive and reproducible SNP filtering. Preprint on Authorea. <http://dx.doi.org/10.22541/au.163976415.53888836/v1> \n \n",
"Knaus, Brian J., and Niklaus J. Grunwald. 2017. VCFR: a package to manipulate and visualize variant call format data in R. Molecular Ecology Resources 17.1:44-53. http://dx.doi.org/10.1111/1755-0998.12549."))
#print package startup message
packageStartupMessage(
c("SNPfiltR v.1.0.0 \n",
"Please cite: \n \n",
"DeRaad, D.A. 2021. SNPfiltR: an R package for interactive and reproducible SNP filtering. Preprint on Authorea. <http://dx.doi.org/10.22541/au.163976415.53888836/v1> \n \n",
"Knaus, Brian J., and Niklaus J. Grunwald. 2017. VCFR: a package to manipulate and visualize variant call format data in R. Molecular Ecology Resources 17.1:44-53. http://dx.doi.org/10.1111/1755-0998.12549."))
#print package startup message
packageStartupMessage(
c("SNPfiltR v.1.0.0 \n \n",
"Please cite: \n",
"DeRaad, D.A. 2021. SNPfiltR: an R package for interactive and reproducible SNP filtering. Preprint on Authorea. <http://dx.doi.org/10.22541/au.163976415.53888836/v1> \n \n",
"Knaus, Brian J., and Niklaus J. Grunwald. 2017. VCFR: a package to manipulate and visualize variant call format data in R. Molecular Ecology Resources 17.1:44-53. http://dx.doi.org/10.1111/1755-0998.12549."))
#print package startup message
packageStartupMessage(
c("SNPfiltR v.1.0.0 \n \n",
"If you use SNPfiltR in your published work, please cite: \n",
"DeRaad, D.A. 2021. SNPfiltR: an R package for interactive and reproducible SNP filtering. Preprint on Authorea. <http://dx.doi.org/10.22541/au.163976415.53888836/v1> \n \n and: \n",
"Knaus, Brian J., and Niklaus J. Grunwald. 2017. VCFR: a package to manipulate and visualize variant call format data in R. Molecular Ecology Resources 17.1:44-53. http://dx.doi.org/10.1111/1755-0998.12549."))
#print package startup message
packageStartupMessage(
c("SNPfiltR v.1.0.0 \n \n",
"If you use SNPfiltR in your published work, please cite: \n",
"DeRaad, D.A. 2021. SNPfiltR: an R package for interactive and reproducible SNP filtering. Preprint on Authorea. <http://dx.doi.org/10.22541/au.163976415.53888836/v1> \n \nand: \n",
"Knaus, Brian J., and Niklaus J. Grunwald. 2017. VCFR: a package to manipulate and visualize variant call format data in R. Molecular Ecology Resources 17.1:44-53. http://dx.doi.org/10.1111/1755-0998.12549."))
#print package startup message
packageStartupMessage(
c("this is SNPfiltR v.1.0.0 \n \n",
"If you use SNPfiltR in your published work, please cite: \n",
"DeRaad, D.A. 2021. SNPfiltR: an R package for interactive and reproducible SNP filtering. Preprint on Authorea. <http://dx.doi.org/10.22541/au.163976415.53888836/v1> \n \nand: \n",
"Knaus, Brian J., and Niklaus J. Grunwald. 2017. VCFR: a package to manipulate and visualize variant call format data in R. Molecular Ecology Resources 17.1:44-53. http://dx.doi.org/10.1111/1755-0998.12549."))
#print package startup message
packageStartupMessage(
c("This is SNPfiltR v.1.0.0 \n \n",
"If you use SNPfiltR in your published work, please cite: \n",
"DeRaad, D.A. 2021. SNPfiltR: an R package for interactive and reproducible SNP filtering. Preprint on Authorea. <http://dx.doi.org/10.22541/au.163976415.53888836/v1> \n \nand: \n",
"Knaus, Brian J., and Niklaus J. Grunwald. 2017. VCFR: a package to manipulate and visualize variant call format data in R. Molecular Ecology Resources 17.1:44-53. http://dx.doi.org/10.1111/1755-0998.12549."))
#print package startup message
packageStartupMessage(
c("This is SNPfiltR v.1.0.0 \n \n",
"If you use SNPfiltR in your published work, please cite: \n",
"DeRaad, D.A. 2021. SNPfiltR: an R package for interactive and reproducible SNP filtering. Preprint on Authorea. <http://dx.doi.org/10.22541/au.163976415.53888836/v1> \n \nand \n \n",
"Knaus, Brian J., and Niklaus J. Grunwald. 2017. VCFR: a package to manipulate and visualize variant call format data in R. Molecular Ecology Resources 17.1:44-53. http://dx.doi.org/10.1111/1755-0998.12549."))
#print package startup message
packageStartupMessage(
c("This is SNPfiltR v.1.0.0 \n \n",
"If you use SNPfiltR in your published work, please cite: \n \n",
"DeRaad, D.A. 2021. SNPfiltR: an R package for interactive and reproducible SNP filtering. Preprint on Authorea. <http://dx.doi.org/10.22541/au.163976415.53888836/v1> \n \nand \n \n",
"Knaus, Brian J., and Niklaus J. Grunwald. 2017. VCFR: a package to manipulate and visualize variant call format data in R. Molecular Ecology Resources 17.1:44-53. http://dx.doi.org/10.1111/1755-0998.12549."))
#print package startup message
packageStartupMessage(
c("This is SNPfiltR v.1.0.0 \n \n",
"If you use SNPfiltR in your published work, please cite: \n\n",
"DeRaad, D.A. 2021. SNPfiltR: an R package for interactive and reproducible SNP filtering. Preprint on Authorea. <http://dx.doi.org/10.22541/au.163976415.53888836/v1> \n \nand \n \n",
"Knaus, Brian J., and Niklaus J. Grunwald. 2017. VCFR: a package to manipulate and visualize variant call format data in R. Molecular Ecology Resources 17.1:44-53. http://dx.doi.org/10.1111/1755-0998.12549."))
#print package startup message
packageStartupMessage(
c("This is SNPfiltR v.1.0.0 \n \n",
"If you use SNPfiltR in your published work, please cite: \n\n",
"DeRaad, D.A. 2021. SNPfiltR: an R package for interactive and reproducible SNP filtering. Preprint on Authorea. <http://dx.doi.org/10.22541/au.163976415.53888836/v1> \n\nand \n\n",
"Knaus, Brian J., and Niklaus J. Grunwald. 2017. VCFR: a package to manipulate and visualize variant call format data in R. Molecular Ecology Resources 17.1:44-53. http://dx.doi.org/10.1111/1755-0998.12549."))
#print package startup message
packageStartupMessage(
c("This is SNPfiltR v.1.0.0 \n\n",
"If you use SNPfiltR in your published work, please cite: \n\n",
"DeRaad, D.A. 2021. SNPfiltR: an R package for interactive and reproducible SNP filtering. Preprint on Authorea. <http://dx.doi.org/10.22541/au.163976415.53888836/v1> \n\nand \n\n",
"Knaus, Brian J., and Niklaus J. Grunwald. 2017. VCFR: a package to manipulate and visualize variant call format data in R. Molecular Ecology Resources 17.1:44-53. http://dx.doi.org/10.1111/1755-0998.12549."))
install_github("DevonDeRaad/SNPfiltR")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(vcfR)
packageStartupMessage(
c("This is SNPfiltR v.1.0.0 \n\n",
"Detailed usage information is available at: https://devonderaad.github.io/SNPfiltR/ \n\n",
"If you use SNPfiltR in your published work, please cite: \n\n",
"DeRaad, D.A. 2021. SNPfiltR: an R package for interactive and reproducible SNP filtering. Preprint on Authorea. <http://dx.doi.org/10.22541/au.163976415.53888836/v1> \n\nand \n\n",
"Knaus, Brian J., and Niklaus J. Grunwald. 2017. VCFR: a package to manipulate and visualize variant call format data in R. Molecular Ecology Resources 17.1:44-53. http://dx.doi.org/10.1111/1755-0998.12549.")
)
packageStartupMessage(
c("This is SNPfiltR v.1.0.0 \n\n",
"Detailed usage information is available at: https://devonderaad.github.io/SNPfiltR/ \n\n",
"If you use SNPfiltR in your published work, please cite the following: \n\n",
"DeRaad, D.A. 2021. SNPfiltR: an R package for interactive and reproducible SNP filtering. Preprint on Authorea. <http://dx.doi.org/10.22541/au.163976415.53888836/v1> \n\n",
"Knaus, Brian J., and Niklaus J. Grunwald. 2017. VCFR: a package to manipulate and visualize variant call format data in R. Molecular Ecology Resources 17.1:44-53. http://dx.doi.org/10.1111/1755-0998.12549.")
)
pkg.version <- utils::packageVersion("vcfR")
pkg.version
pkg.version <- utils::packageVersion("SNPfiltR")
pkg.version
packageStartupMessage(
c("This is SNPfiltR v.", pkg.version, "\n\n",
"Detailed usage information is available at: https://devonderaad.github.io/SNPfiltR/ \n\n",
"If you use SNPfiltR in your published work, please cite the following papers: \n\n",
"DeRaad, D.A. 2021. SNPfiltR: an R package for interactive and reproducible SNP filtering. Preprint on Authorea. <http://dx.doi.org/10.22541/au.163976415.53888836/v1> \n\n",
"Knaus, Brian J., and Niklaus J. Grunwald. 2017. VCFR: a package to manipulate and visualize variant call format data in R. Molecular Ecology Resources 17.1:44-53. http://dx.doi.org/10.1111/1755-0998.12549.")
)
packageStartupMessage(
c(paste("This is SNPfiltR v.", pkg.version, "\n\n"),
"Detailed usage information is available at: https://devonderaad.github.io/SNPfiltR/ \n\n",
"If you use SNPfiltR in your published work, please cite the following papers: \n\n",
"DeRaad, D.A. 2021. SNPfiltR: an R package for interactive and reproducible SNP filtering. Preprint on Authorea. <http://dx.doi.org/10.22541/au.163976415.53888836/v1> \n\n",
"Knaus, Brian J., and Niklaus J. Grunwald. 2017. VCFR: a package to manipulate and visualize variant call format data in R. Molecular Ecology Resources 17.1:44-53. http://dx.doi.org/10.1111/1755-0998.12549.")
)
packageStartupMessage(
c(paste0("This is SNPfiltR v.", pkg.version, "\n\n"),
"Detailed usage information is available at: https://devonderaad.github.io/SNPfiltR/ \n\n",
"If you use SNPfiltR in your published work, please cite the following papers: \n\n",
"DeRaad, D.A. 2021. SNPfiltR: an R package for interactive and reproducible SNP filtering. Preprint on Authorea. <http://dx.doi.org/10.22541/au.163976415.53888836/v1> \n\n",
"Knaus, Brian J., and Niklaus J. Grunwald. 2017. VCFR: a package to manipulate and visualize variant call format data in R. Molecular Ecology Resources 17.1:44-53. http://dx.doi.org/10.1111/1755-0998.12549.")
)
packageStartupMessage(
c(paste0("This is SNPfiltR v.", pkg.version, "\n\n"),
"Detailed usage information is available at: devonderaad.github.io/SNPfiltR/ \n\n",
"If you use SNPfiltR in your published work, please cite the following papers: \n\n",
"DeRaad, D.A. 2021. SNPfiltR: an R package for interactive and reproducible SNP filtering. Preprint on Authorea. <http://dx.doi.org/10.22541/au.163976415.53888836/v1> \n\n",
"Knaus, Brian J., and Niklaus J. Grunwald. 2017. VCFR: a package to manipulate and visualize variant call format data in R. Molecular Ecology Resources 17.1:44-53. http://dx.doi.org/10.1111/1755-0998.12549.")
)
install_github("DevonDeRaad/SNPfiltR")
pkgdown::build_home()
vcfR <- read.vcfR("~/Downloads/hippo.wgs/hippo.100K.filtered.recode.vcf")
min.dstance=1000
library(vcfR)
vcfR <- read.vcfR("~/Downloads/hippo.wgs/hippo.100K.filtered.recode.vcf")
min.distance=1000
#generate dataframe containing information for chromosome and bp locality of each SNP
df<-as.data.frame(vcfR@fix[,1:2])
View(df)
#generate list of all unique chromosomes in alphabetical order
chroms<-levels(as.factor(df$CHROM))
#intialize empty df to hold filtering
keep.df<-data.frame()
#make progress bar
pb <- utils::txtProgressBar(min = 0, max = length(chroms), style = 3)
#begin tracker
pbtrack<-1
for (t in chroms){
#isolate the SNP positions on the given chromosome
fix.sub<-as.numeric(df$POS[df$CHROM == t])
#order the positions numerically
fix.sub<-fix.sub[order(fix.sub)]
#set the first position
prev<-fix.sub[1]
#initialize empty vector
k<-c()
#always keep first SNP on the chromosome
k[1]<-TRUE
#loop to decide whether to keep each following SNP
if (length(fix.sub) < 2){
#if chrom only has 1 SNP, do nothing
} else{
#else, use a for loop to determine which SNPs to keep that satisfy our distance criteria
for (i in 2:length(fix.sub)){
#store logical indicating whether this SNP is greater than j base pairs from the previous SNP
k[i]<- fix.sub[i] > prev+j
#if it is, then we keep this SNP, making it the new 'previous' for assessing the next point.
#If we don't keep the SNP, we don't update the closest point
if (fix.sub[i] > prev+j){
prev<-fix.sub[i]
}
#close for loop
}
#close else statement
}
}
j=min.distance
for (t in chroms){
#isolate the SNP positions on the given chromosome
fix.sub<-as.numeric(df$POS[df$CHROM == t])
#order the positions numerically
fix.sub<-fix.sub[order(fix.sub)]
#set the first position
prev<-fix.sub[1]
#initialize empty vector
k<-c()
#always keep first SNP on the chromosome
k[1]<-TRUE
#loop to decide whether to keep each following SNP
if (length(fix.sub) < 2){
#if chrom only has 1 SNP, do nothing
} else{
#else, use a for loop to determine which SNPs to keep that satisfy our distance criteria
for (i in 2:length(fix.sub)){
#store logical indicating whether this SNP is greater than j base pairs from the previous SNP
k[i]<- fix.sub[i] > prev+j
#if it is, then we keep this SNP, making it the new 'previous' for assessing the next point.
#If we don't keep the SNP, we don't update the closest point
if (fix.sub[i] > prev+j){
prev<-fix.sub[i]
}
#close for loop
}
#close else statement
}
#make a dataframe with the precise info for each SNP for this chromosome
chrom.df<-data.frame(CHROM=rep(t, times=length(fix.sub)), POS=fix.sub, keep=k)
#now we rbind in the information for this chromosome to the overall df
keep.df<-rbind(keep.df,chrom.df)
#empty df for this chrom to prepare for the next one
chrom.df<-NULL
#update progress bar
utils::setTxtProgressBar(pb, pbtrack)
#update tracker
pbtrack<-pbtrack+1
} #close for loop, start over on next chromosome
#close progress bar
close(pb)
View(keep.df)
vcfR<-read.vcfR("~/Downloads/hippo.wgs/chr.18.subset.recode.vcf.gz")
min.distance=1000
#set min distance specified by user
j=min.distance
#generate dataframe containing information for chromosome and bp locality of each SNP
df<-as.data.frame(vcfR@fix[,1:2])
#generate list of all unique chromosomes in alphabetical order
chroms<-levels(as.factor(df$CHROM))
#intialize empty df to hold filtering
keep.df<-data.frame()
#make progress bar
pb <- utils::txtProgressBar(min = 0, max = length(chroms), style = 3)
#begin tracker
pbtrack<-1
for (t in chroms){
#isolate the SNP positions on the given chromosome
fix.sub<-as.numeric(df$POS[df$CHROM == t])
#order the positions numerically
fix.sub<-fix.sub[order(fix.sub)]
#set the first position
prev<-fix.sub[1]
#initialize empty vector
k<-c()
#always keep first SNP on the chromosome
k[1]<-TRUE
#loop to decide whether to keep each following SNP
if (length(fix.sub) < 2){
#if chrom only has 1 SNP, do nothing
} else{
#else, use a for loop to determine which SNPs to keep that satisfy our distance criteria
for (i in 2:length(fix.sub)){
#store logical indicating whether this SNP is greater than j base pairs from the previous SNP
k[i]<- fix.sub[i] > prev+j
#if it is, then we keep this SNP, making it the new 'previous' for assessing the next point.
#If we don't keep the SNP, we don't update the closest point
if (fix.sub[i] > prev+j){
prev<-fix.sub[i]
}
#close for loop
}
#close else statement
}
#make a dataframe with the precise info for each SNP for this chromosome
chrom.df<-data.frame(CHROM=rep(t, times=length(fix.sub)), POS=fix.sub, keep=k)
#now we rbind in the information for this chromosome to the overall df
keep.df<-rbind(keep.df,chrom.df)
#empty df for this chrom to prepare for the next one
chrom.df<-NULL
#update progress bar
utils::setTxtProgressBar(pb, pbtrack)
#update tracker
pbtrack<-pbtrack+1
} #close for loop, start over on next chromosome
View(keep.df)
table(keep.df$keep)
#close progress bar
close(pb)
#order the dataframe to match the order of the input vcf file
order.df<-keep.df[match(paste(df$CHROM,df$POS), paste(keep.df$CHROM,keep.df$POS)),]
View(order.df)
View(keep.df)
View(df)
View(keep.df)
View(order.df)
View(keep.df)
View(order.df)
View(keep.df)
match(paste(df$CHROM,df$POS), paste(keep.df$CHROM,keep.df$POS))
View(order.df)
View(df)
paste(df$CHROM[1],df$POS[1])
View(keep.df)
View(df)
paste(df$CHROM[1],df$POS[1]) %in% paste(keep.df$CHROM,keep.df$POS)
paste(df$CHROM[1],df$POS[1])
paste(keep.df$CHROM[1],keep.df$POS[1])
paste(df$CHROM[1],df$POS[1]) == paste(keep.df$CHROM[1],keep.df$POS[1])
match(format(paste(df$CHROM,df$POS),scientific = FALSE), format(paste(keep.df$CHROM,keep.df$POS),scientific = FALSE))
format(paste(df$CHROM[1],df$POS[1]),scientific = FALSE)
format(paste(keep.df$CHROM[1],keep.df$POS[1]),scientific = FALSE)
paste(keep.df$CHROM[1],format(keep.df$POS[1],scientific = FALSE))
match(paste(df$CHROM,format(df$POS,scientific = FALSE)), paste(keep.df$CHROM,format(keep.df$POS,scientific = FALSE)))
