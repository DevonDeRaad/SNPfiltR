df$POS<-format(df$POS,scientific = FALSE)
#make sure class matches between the columns you're trying to merge
keep.df$POS<-as.numeric(as.character(keep.df$POS))
df$POS<-as.numeric(as.character(df$POS))
#make sure class matches between the columns you're trying to merge
keep.df$CHROM<-as.character(keep.df$CHROM)
df$CHROM<-as.character(df$CHROM)
#add tracking column
df$id<-c(1:nrow(df))
#merge
order.df<-merge(keep.df,df)
#order based on tracking column
order.df<-order.df[order(order.df$id),]
if (sum(is.na(order.df)) > .5){
stop("internal error with the merge function. Please email a copy of your input vcf to devonderaad@gmail.com for a bug fix")
}
#write a test to catch if this internal dataset is not able to merge correctly
if (order.df$id != c(1:nrow(df))){
stop("internal error with the merge function. Please email a copy of your input vcf to devonderaad@gmail.com for a bug fix")
}
View(order.df)
#write a test to catch if this internal dataset is not able to merge correctly
if (sum(order.df$id != c(1:nrow(df))) > .5){
stop("internal error with the merge function. Please email a copy of your input vcf to devonderaad@gmail.com for a bug fix")
}
pkgdown::build_site()
pkgdown::build_home()
pkgdown::build_home()
rhub::check_for_cran()
pkgdown::build_home()
rhub::check_for_cran()
rhub::check_for_cran()
pkgdown::build_home()
pkgdown::build_home()
vcfR<-read.vcfR("~/Downloads/hippo.wgs/chr.18.subset.recode.vcf.gz")
j=100
#generate dataframe containing information for chromosome and bp locality of each SNP
df<-as.data.frame(vcfR@fix[,1:2])
#write test to identify and remove duplicated SNPs in input vcf
if (length(unique(paste(df$CHROM,df$POS))) < nrow(df)){
#remove duplicated SNPs
vcfR<-vcfR[!duplicated(paste(df$CHROM,df$POS)),]
#report to user
message(nrow(df) - length(unique(paste(df$CHROM,df$POS)))," duplicated SNPs removed from input vcf")
#regenerate df without duplicate inputs
df<-as.data.frame(vcfR@fix[,1:2])
}
#generate list of all unique chromosomes in alphabetical order
chroms<-levels(as.factor(df$CHROM))
#intialize empty df to hold filtering
keep.df<-data.frame()
#make progress bar
pb <- utils::txtProgressBar(min = 0, max = length(chroms), style = 3)
#begin tracker
pbtrack<-1
#loop over each chromosome
#for t in vector containing the name of each chromosome
for (t in chroms){
#isolate the SNP positions on the given chromosome
fix.sub<-as.numeric(df$POS[df$CHROM == t])
#order the positions numerically
fix.sub<-fix.sub[order(fix.sub)]
#set the first position
prev<-fix.sub[1]
#initialize empty vector
k<-c()
#always keep first SNP on the chromosome
k[1]<-TRUE
#loop to decide whether to keep each following SNP
if (length(fix.sub) < 2){
#if chrom only has 1 SNP, do nothing
} else{
#else, use a for loop to determine which SNPs to keep that satisfy our distance criteria
for (i in 2:length(fix.sub)){
#store logical indicating whether this SNP is greater than j base pairs from the previous SNP
k[i]<- fix.sub[i] > prev+j
#if it is, then we keep this SNP, making it the new 'previous' for assessing the next point.
#If we don't keep the SNP, we don't update the closest point
if (fix.sub[i] > prev+j){
prev<-fix.sub[i]
}
#close for loop
}
#close else statement
}
#make a dataframe with the precise info for each SNP for this chromosome
chrom.df<-data.frame(CHROM=rep(t, times=length(fix.sub)), POS=fix.sub, keep=k)
#now we rbind in the information for this chromosome to the overall df
keep.df<-rbind(keep.df,chrom.df)
#empty df for this chrom to prepare for the next one
chrom.df<-NULL
#update progress bar
utils::setTxtProgressBar(pb, pbtrack)
#update tracker
pbtrack<-pbtrack+1
} #close for loop, start over on next chromosome
#close progress bar
close(pb)
#order the dataframe to match the order of the input vcf file
#remove scientific notation
keep.df$POS<-format(keep.df$POS,scientific = FALSE)
df$POS<-format(df$POS,scientific = FALSE)
#make sure class matches between the columns you're trying to merge
keep.df$POS<-as.numeric(as.character(keep.df$POS))
df$POS<-as.numeric(as.character(df$POS))
#make sure class matches between the columns you're trying to merge
keep.df$CHROM<-as.character(keep.df$CHROM)
df$CHROM<-as.character(df$CHROM)
#add tracking column
df$id<-c(1:nrow(df))
#merge
order.df<-merge(keep.df,df)
#order based on tracking column
order.df<-order.df[order(order.df$id),]
View(order.df)
#write a test to catch if this internal dataset is not able to merge correctly
if (sum(is.na(order.df)) > .5){
stop("internal error with the merge function. Please email a copy of your input vcf to devonderaad@gmail.com for a bug fix")
}
#write a test to catch if this internal dataset is not able to merge correctly
if (sum(order.df$id != c(1:nrow(df))) > .5){
stop("internal error with the merge function. Please email a copy of your input vcf to devonderaad@gmail.com for a bug fix")
}
ad.matrix<- vcfR::extract.gt(vcfR, element='AD')
as.numeric(gsub(".*,[^,]*,([^,]+).*", "\\1", c(9,98,99,0)))
as.numeric(gsub(".*,[^,]*,([^,]+).*", "\\1", c(9,98,99,0)))
strsplit(c(9,98,99,0), split = ",")
strsplit("9,98,99,0", split = ",")
strsplit("9,98,99,0", split = ",")[3]
dim(strsplit("9,98,99,0", split = ","))
dim(strsplit("9,98,99,0", split = ","))[[3]]
x<-strsplit("9,98,99,0", split = ",")
View(x)
x[[1]]
x[[1]][3]
strsplit("9,98,99,0", split = ",")[[1]][3]
#' allele balance in our data (for real loci) should be close to 0.5".
#'
#' @param vcfR a vcfR object
#' @param min.ratio minumum allele ratio for a called het
#' @param max.ratio maximum allele ratio for a called het
#' @return An identical vcfR object, except that genotypes failing the allele balance
#' filter have been converted to 'NA'.
#' @examples
#' filter_allele_balance(vcfR = SNPfiltR::vcfR.example)
#' @export
filter_allele_balance <- function(vcfR,
min.ratio=NULL,
max.ratio=NULL){
#if specified vcfR is not class 'vcfR', fail gracefully
if (class(vcfR) != "vcfR"){
stop("specified vcfR object must be of class 'vcfR'")
}
#set default parameter for minimum allele ratio for a het call (.25)
if(is.null(min.ratio)){
min.ratio=.25
}
#set default parameter for maximum allele ratio for a het call (.75)
if(is.null(max.ratio)){
max.ratio=.75
}
#if these ratios have been specified by the user, leave them alone
#extract allele depth from the vcf
#if allele depth is specified as 'AD', extract matrix
ad.matrix<- vcfR::extract.gt(vcfR, element='AD')
#write a test to identify how allele depth is specified, or not specified
if (length(grep("AD",vcfR@gt[,1])) > 0.5){
#if allele depth is specified as 'AD', extract matrix
ad.matrix<- vcfR::extract.gt(vcfR, element='AD')
}else if(length(grep("CATG",vcfR@gt[,1])) > 0.5){
#print warning that this will be slow
print("Warning, allele depth encoded only as raw CATG counts, must first index out relevant allele depths, which is time consuming")
#if allele depth is specified as 'CATG', extract matrix of 'CATG' values
full.matrix<- vcfR::extract.gt(vcfR, element='CATG')
#open empty matrix to hold relevant AD info same size as full.matrix
ad.matrix<-matrix(, nrow = nrow(full.matrix), ncol = ncol(full.matrix))
#extract only REF and ALT allele depth values
for (i in 1:nrow(full.matrix)){
#convert reference allele to indexing tool, C > 1, A > 2, T > 3, G > 4
k<-as.numeric(gsub("G","4",gsub("T","3",gsub("A","2",gsub("C","1",as.data.frame(vcfR@fix)$REF[i])))))
#convert ALT allele to indexing tool, C > 1, A > 2, T > 3, G > 4
l<-as.numeric(gsub("G","4",gsub("T","3",gsub("A","2",gsub("C","1",as.data.frame(vcfR@fix)$ALT[i])))))
#extract the REF and ALT depths for each genotype and save them as a single vector, w/ values separated by a comma. Write that vector to the new matrix
ad.matrix[i,]<-sapply(lapply(strsplit(full.matrix[i,],","), '[', c(k,l)), paste0, collapse=",")
}
print("CATG format converted to REF,ALT allele depth")
}else{
stop("allele depth is not specified in input vcf in 'AD' or 'CATG' format, therefore allele balance cannot be calculated")
}
#extract GT from the vcf
gt.matrix<- vcfR::extract.gt(vcfR, element='GT')
#mask ad matrix to include only called hets from gt matrix
ad.matrix[gt.matrix != "0/1" & gt.matrix != "1/0"]<-NA
#split allele 1 depth from allele 2 depth
al1<-structure(as.numeric(gsub(",.*", "", ad.matrix)), dim=dim(ad.matrix))
al2<-structure(as.numeric(gsub(".*,", "", ad.matrix)), dim=dim(ad.matrix))
#calculate AB for each sample
al.bal<-al1/(al1 + al2)
#calculate logical storing whether each het genotype passes the filter
AB<-al1/(al1 + al2) > max.ratio | al1/(al1 + al2) < min.ratio
#calculate percent of het genotypes failing the filter
p<-round(sum(AB, na.rm = TRUE) / sum(is.na(AB) == FALSE)*100, 2)
#calculate overall percentage of genotypes failing the filter
j<-round(sum(AB, na.rm = TRUE) / sum(is.na(gt.matrix) == FALSE)*100, 2)
#print to user
message(p,"% of het genotypes (",j,"% of all genotypes) fall outside of ",min.ratio," - ",max.ratio, " allele balance ratio and were converted to NA")
#convert failing genotypes to NA
vcfR@gt[,-1][AB]<-NA
#make histogram of allele balance at all het genotypes
graphics::hist(al.bal,
xlim = c(0,1),
ylab = "number of genotypes",
xlab = "Allele balance",
main ="allele balance distribution")
graphics::abline(v=c(min.ratio,max.ratio),
col="red")
#return vcfR
return(vcfR)
#close function
}
R CMD build
build
library(SNPfiltR)
devtools::build_readme()
library(usethis)
library(devtools)
devtools::build_readme()
library(pkgdown)
devtools::build_readme()
v<-vcfR::read.vcfR("~/Downloads/populations.snps (1).vcf.gz")
colnames(v@gt)
colnames(v@gt) == "FORMAT" |
colnames(v@gt) == "A_coerulescens_396259" |
colnames(v@gt) == "A_woodhouseii_343458" |
colnames(v@gt) == "A_woodhouseii_343480" |
colnames(v@gt) == "A_coerulscens_396256" |
colnames(v@gt) == "A_woodhouseii_343481" |
colnames(v@gt) == "A_californica_393721" |
colnames(v@gt) == "A_californica_333855" |
colnames(v@gt) == "A_coerulescens_396254" |
colnames(v@gt) == "A_woodhouseii_343476" |
colnames(v@gt) == "A_californica_333854" |
colnames(v@gt) == "A_californica_333860" |
colnames(v@gt) == "A_insularis_334037" |
colnames(v@gt) == "A_coerulescens_396251" |
colnames(v@gt) == "A_insularis_334034" |
colnames(v@gt) == "A_insularis_334031" |
colnames(v@gt) == "A_woodhouseii_343461" |
colnames(v@gt) == "A_californica_333849" |
colnames(v@gt) == "A_californica_333857" |
colnames(v@gt) == "A_insularis_334032" |
colnames(v@gt) == "A_insularis_334033"
vsub<-v[,colnames(v@gt) == "FORMAT" |
colnames(v@gt) == "A_coerulescens_396259" |
colnames(v@gt) == "A_woodhouseii_343458" |
colnames(v@gt) == "A_woodhouseii_343480" |
colnames(v@gt) == "A_coerulscens_396256" |
colnames(v@gt) == "A_woodhouseii_343481" |
colnames(v@gt) == "A_californica_393721" |
colnames(v@gt) == "A_californica_333855" |
colnames(v@gt) == "A_coerulescens_396254" |
colnames(v@gt) == "A_woodhouseii_343476" |
colnames(v@gt) == "A_californica_333854" |
colnames(v@gt) == "A_californica_333860" |
colnames(v@gt) == "A_insularis_334037" |
colnames(v@gt) == "A_coerulescens_396251" |
colnames(v@gt) == "A_insularis_334034" |
colnames(v@gt) == "A_insularis_334031" |
colnames(v@gt) == "A_woodhouseii_343461" |
colnames(v@gt) == "A_californica_333849" |
colnames(v@gt) == "A_californica_333857" |
colnames(v@gt) == "A_insularis_334032" |
colnames(v@gt) == "A_insularis_334033"]
vsub
colnames(vsub@gt)
vsub<-v[,colnames(v@gt) == "FORMAT" |
colnames(v@gt) == "A_coerulescens_396259" |
colnames(v@gt) == "A_woodhouseii_343458" |
colnames(v@gt) == "A_woodhouseii_343480" |
colnames(v@gt) == "A_coerulescens_396256" |
colnames(v@gt) == "A_woodhouseii_343481" |
colnames(v@gt) == "A_californica_393721" |
colnames(v@gt) == "A_californica_333855" |
colnames(v@gt) == "A_coerulescens_396254" |
colnames(v@gt) == "A_woodhouseii_343476" |
colnames(v@gt) == "A_californica_333854" |
colnames(v@gt) == "A_californica_333860" |
colnames(v@gt) == "A_insularis_334037" |
colnames(v@gt) == "A_coerulescens_396251" |
colnames(v@gt) == "A_insularis_334034" |
colnames(v@gt) == "A_insularis_334031" |
colnames(v@gt) == "A_woodhouseii_343461" |
colnames(v@gt) == "A_californica_333849" |
colnames(v@gt) == "A_californica_333857" |
colnames(v@gt) == "A_insularis_334032" |
colnames(v@gt) == "A_insularis_334033"]
vsub
vs<-min_mac(vsub, min.mac = 1)
vs
vcfR::write.vcf(vs,"~/Desktop/SNPfiltR.benchmarking.data/subset.scrub.vcf.gz")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
vcfR <- read.vcfR("~/Downloads/subset.scrub.vcf")
devtools::build_readme()
rm(list=ls())
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.path = "man/figures/README-",
out.width = "100%"
)
library(SNPfiltR)
library(vcfR)
##If you want to follow along, run this bash code in a terminal window to download the input file used for this tutorial directly from GitHub into the 'Downloads' folder of your local machine
#cd Downloads/
#wget https://github.com/DevonDeRaad/SNPfiltR.benchmarking.data/blob/main/subset.scrub.vcf.gz?raw=true
#gunzip subset.scrub.vcf.gz
#read vcf into this R session as vcfR
vcfR <- read.vcfR("~/Downloads/subset.scrub.vcf")
### check the metadata present in your vcf
vcfR
#generate popmap file. Two column popmap with the same format as stacks, and the columns must be named 'id' and 'pop'
popmap<-data.frame(id=colnames(vcfR@gt)[2:length(colnames(vcfR@gt))],pop=substr(colnames(vcfR@gt)[2:length(colnames(vcfR@gt))], 3,11))
#visualize distributions
hard_filter(vcfR=vcfR)
#hard filter to minimum depth of 5, and minimum genotype quality of 30
vcfR<-hard_filter(vcfR=vcfR, depth = 5, gq = 30)
#execute allele balance filter
vcfR<-filter_allele_balance(vcfR)
#visualize and pick appropriate max depth cutoff
max_depth(vcfR)
#filter vcf by the max depth cutoff you chose
vcfR<-max_depth(vcfR, maxdepth = 100)
#check vcfR to see how many SNPs we have left
vcfR
#run function to visualize samples
missing_by_sample(vcfR=vcfR, popmap = popmap)
#run function to drop samples above the threshold we want from the vcf
vcfR<-missing_by_sample(vcfR=vcfR, cutoff = .9)
#subset popmap to only include retained individuals
popmap<-popmap[popmap$id %in% colnames(vcfR@gt),]
#remove invariant sites generated by dropping individuals
vcfR<-min_mac(vcfR, min.mac = 1)
#if vcfR is not class vcfR, fail gracefully
if (class(vcfR) != "vcfR"){
stop("specified vcfR object must be of class 'vcfR'")
}
gt.matrix<-vcfR::extract.gt(vcfR)
gt.matrix[gt.matrix == "0/0"]<-0
gt.matrix[gt.matrix == "0/1"]<-1
gt.matrix[gt.matrix == "1/1"]<-2
class(gt.matrix) <- "numeric"
#calc sfs
sfs<-rowSums(gt.matrix, na.rm = TRUE)
#fold sfs
for (i in 1:length(sfs)) {
if (sfs[i] <= sum(!is.na(gt.matrix[i,]))){}
else {
sfs[i]<-(sum(!is.na(gt.matrix[i,]))*2 - sfs[i])
}
}
#hist folded mac with cutoff shown
graphics::hist(sfs,
main="folded SFS",
xlab = "MAC")
graphics::abline(v=min.mac-1,
col="red")
#calculate % of SNPs to be removed
p<-round((sum(sfs < min.mac)/length(sfs))*100, 2)
#print message to user
message(p, "% of SNPs fell below a minor allele count of ", min.mac, " and were removed from the VCF")
max(nchar(gsub(",","",vcfR@fix[,"ALT"]))) > 1
vcfR@fix[,"ALT"]
gsub(",","",vcfR@fix[,"ALT"])
nchar(gsub(",","",vcfR@fix[,"ALT"]))
max(nchar(gsub(",","",vcfR@fix[,"ALT"])))
max(nchar(gsub(",","",vcfR@fix[,"ALT"])), na.rm = T)
install_github("DevonDeRaad/SNPfiltR")
library(SNPfiltR)
install_github("DevonDeRaad/SNPfiltR")
devtools::install_github("DevonDeRaad/SNPfiltR")
devtools::install_github("DevonDeRaad/SNPfiltR")
devtools::install_github("DevonDeRaad/SNPfiltR")
library(SNPfiltR)
devtools::build_readme()
usethis::use_version()
devtools::install_github("DevonDeRaad/SNPfiltR")
library(SNPfiltR)
library(SNPfiltR)
devtools::build_readme()
install.packages(roxygen2)
install.packages("roxygen2")
install.packages("vctrs")
install.packages("SNPfiltR")
devtools::install_github("r-lib/vctrs")
install.packages("devtools")
install.packages("SNPfiltR")
install.packages("vctrs")
install.packages("SNPfiltR")
library(SNPfiltR)
install.packages("vctrs")
library(pkgdown)
pkgdown::build_site()
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
install.packages("vctrs")
Sys.getenv("PATH")
Sys.setenv("/usr/local/bin/:/usr/local/Cellar/python@3.9/3.9.5/bin:/opt/local/bin:/opt/local/sbin:/Users/devder/opt/anaconda3/bin:/usr/local/Cellar/libgit2/1.1.0/lib/pkgconfig:/Library/TeX/texbin/pdflatex:/Users/devder/opt/anaconda3/bin/:Downloads/projects/cmake:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Users/devder/opt/anaconda3/bin/python:/Library/TeX/texbin:/opt/X11/bin:/Users/devder/Applications/quarto/bin:/usr/texbin:/Applications/RStudio.app/Contents/Resources/app/quarto/bin:/Applications/RStudio.app/Contents/Resources/app/bin/postback")
Sys.setenv(PATH="/usr/local/bin/:/usr/local/Cellar/python@3.9/3.9.5/bin:/opt/local/bin:/opt/local/sbin:/Users/devder/opt/anaconda3/bin:/usr/local/Cellar/libgit2/1.1.0/lib/pkgconfig:/Library/TeX/texbin/pdflatex:/Users/devder/opt/anaconda3/bin/:Downloads/projects/cmake:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Users/devder/opt/anaconda3/bin/python:/Library/TeX/texbin:/opt/X11/bin:/Users/devder/Applications/quarto/bin:/usr/texbin:/Applications/RStudio.app/Contents/Resources/app/quarto/bin:/Applications/RStudio.app/Contents/Resources/app/bin/postback")
Sys.getenv("PATH")
Sys.getenv()
Sys.getenv("PATH")
Sys.setenv(PATH="/usr/local/bin/:/usr/local/Cellar/python@3.9/3.9.5/bin:/opt/local/bin:/opt/local/sbin:/Users/devder/opt/anaconda3/bin:/usr/local/Cellar/libgit2/1.1.0/lib/pkgconfig:/Library/TeX/texbin/pdflatex:/Users/devder/opt/anaconda3/bin/:Downloads/projects/cmake:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Users/devder/opt/anaconda3/bin/python:/Library/TeX/texbin:/opt/X11/bin:/Users/devder/Applications/quarto/bin:/usr/texbin:/Applications/RStudio.app/Contents/Resources/app/quarto/bin:/Applications/RStudio.app/Contents/Resources/app/bin/postback")
install.packages("vctrs")
Sys.getenv("R_USER")
Sys.getenv('HOME')
usethis::edit_r_environ()
Sys.getenv("PATH")
usethis::edit_r_environ()
Sys.getenv("PATH")
usethis::edit_r_environ()
Sys.getenv("PATH")
Sys.getenv("PATH")
Sys.getenv("PATH")
pwd
Sys.getenv("PATH")
usethis::edit_r_environ()
Sys.getenv("PATH")
usethis::edit_r_environ()
Sys.getenv("PATH")
PATH
path
Sys.getenv("HOME")
usethis::edit_r_environ()
Sys.getenv("PATH")
usethis::edit_r_environ()
Sys.getenv("PATH")
library(pkgdown)
Sys.getenv("PATH")
Sys.setenv(PATH="/usr/local/bin/:/usr/local/Cellar/python@3.9/3.9.5/bin:/opt/local/bin:/opt/local/sbin:/Users/devder/opt/anaconda3/bin:/usr/local/Cellar/libgit2/1.1.0/lib/pkgconfig:/Library/TeX/texbin/pdflatex:/Users/devder/opt/anaconda3/bin/:Downloads/projects/cmake:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/Users/devder/opt/anaconda3/bin/python:/Library/TeX/texbin:/opt/X11/bin:/Users/devder/Applications/quarto/bin:/usr/texbin:/Applications/RStudio.app/Contents/Resources/app/quarto/bin:/Applications/RStudio.app/Contents/Resources/app/bin/postback:/Applications/RStudio.app/Contents/Resources/app/bin/postback")
pkgdown::build_site()
pkgdown::preview_page('articles/index.html')
pkgdown::preview_page('articles/index.html')
.Last.error
pkgdown::build_site()
library(SNPfiltR)
library(vcfR)
library(microbenchmark)
install.packages("microbenchmark")
library(ggplot2)
library(lubridate)
install.packages("lubridate")
pkgdown::build_site()
pkgdown::build_site()
.Last.error
library(reshape2)
reshape::melt(diamonds)
reshape2::melt(diamonds)
pkgdown::build_site()
vcfR <- read.vcfR("~/Downloads/wesj-toepads-rawSNPS-Q30.vcf")
rhub::check_for_cran()
install.packages("rhub")
rhub::check_for_cran()
rhub::check_for_cran(path = "~/Desktop/SNPfiltR_1.0.1.tar.gz")
inherits(vcfR)
inherits(vcfR, what = "logical")
inherits(vcfR, what = "vcfR")
class(vcfR)
class(vcfR) != "vcfR"
class(vcfR) != "vcfR"
class(vcfR) = "vcfR"
class(vcfR) == "vcfR"
!inherits(vcfR, what = "vcfR")
!inherits(vcfR, what = "logical")
!inherits(popmap, what = "data.frame")
library(SNPfiltR)
library(vcfR)
data(vcfR.example)
vcfR.example
vcfR.example
vcfR.example@fix[1:10,1:8]
vcfR.example@gt[1:10,1:2]
data(popmap)
popmap
vcfR<-hard_filter(vcfR=vcfR.example, depth = 5, gq = 30)
vcfR<-filter_allele_balance(vcfR)
vcfR<-max_depth(vcfR, maxdepth = 100)
miss<-missing_by_sample(vcfR=vcfR)
vcfR<-missing_by_sample(vcfR=vcfR, cutoff = .9)
vcfR<-min_mac(vcfR, min.mac = 1)
popmap<-popmap[popmap$id %in% colnames(vcfR@gt)[-1],]
missing_by_snp(vcfR)
assess_missing_data_pca(vcfR = vcfR, popmap = popmap, thresholds = c(.8), clustering = FALSE)
assess_missing_data_tsne(vcfR = vcfR, popmap = popmap, thresholds = c(.8), clustering = FALSE)
filt<-miss[miss$filt == .8,]
filt[order(filt$snps.retained),]
vcfR<- vcfR[,colnames(vcfR@gt) != "A_coerulescens_396263" & colnames(vcfR@gt) != "A_woodhouseii_334134" & colnames(vcfR@gt) != "A_coerulescens_396256"]
vcfR<-min_mac(vcfR, min.mac = 1)
vcfR
popmap<-popmap[popmap$id %in% colnames(vcfR@gt)[-1],]
missing_by_snp(vcfR)
vcfR<-missing_by_snp(vcfR, cutoff = .6)
vcfR<-min_mac(vcfR = vcfR, min.mac = 2)
vcfR<-distance_thin(vcfR, min.distance = 500)
vcfR
rhub::check_for_cran(path = "~/Desktop/SNPfiltR_1.0.1.tar.gz")
